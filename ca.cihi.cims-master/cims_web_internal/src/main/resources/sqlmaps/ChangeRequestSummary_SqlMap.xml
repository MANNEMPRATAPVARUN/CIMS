<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ca.cihi.cims.data.mapper.ChangeRequestSummaryMapper" >

   <resultMap id="ConceptModificationMap" type="ca.cihi.cims.model.changerequest.ConceptModification">
   	   <id property="structureId" column="structureid"/>
   	   <id property="elementId" column="domainelementid"/>   	   
       <result property="code"  column="code" />
       <result property="validationId" column="validationId "/>
   </resultMap>
   
   <resultMap id="ProposedChangeMap" type="ca.cihi.cims.model.changerequest.ProposedChange">
       <id property="elementVersionId" column="changedElementVersionId"/>
       <result property="tableName"  column="tablename" />
       <result property="fieldName"  column="fieldName" />       
       <result property="oldValue"  column="oldValue" />
       <result property="proposedValue"  column="changedValue" />
       <result property="conflictValue"  column="conflict" />   
           
   </resultMap> 
   
    <resultMap id="RealizedChangeMap" type="ca.cihi.cims.model.changerequest.RealizedChange">
       <id property="elementVersionId" column="realizedElementVersionId"/>
       <result property="tableName"  column="tablename" />
       <result property="fieldName"  column="fieldName" />
       <result property="oldValue"  column="oldValue" />
       <result property="newValue"  column="realizedValue" />     
   </resultMap>
   
    <select id="findProposedStatus" resultType="java.lang.String">
   			 select cv.status                 changedValue	              
	         from structureelementversion sev, elementversion ev, structureversion sv, conceptversion cv
	         where sev.structureid = #{contextId} 
	                and sev.elementversionid = ev.elementversionid
	                and cv.conceptid = ev.elementversionid
	                and ev.classid in ( select classid from class c where c.tablename = 'ConceptVersion' 
	                                           and c.classname in ('ClassificationRoot', 'Section', 'Block', 'Group', 'Rubric', 'CCICODE', 'Chapter', 'Category',
	                                                               'AlphabeticIndex', 'ExternalInjuryIndex', 'NeoplasmIndex', 'DrugsAndChemicalsIndex', 'Index', 'Supplement',
	                                                                'BookIndex', 'LetterIndex')
	                                   )
	                and sv.structureid = sev.structureid
	                and cv.elementid = #{domainElementId}
    </select>
    
   <select id="findProposedStatusChanges" resultMap="ProposedChangeMap">
   		-- Get the changes on concept (i.e., concept status)
	    With conceptChanges as (
	            select 
	                cv.classid                changedElementClassId
	              , decode(cv.status, '', 'no_value', cv.status)  changedValue
	              , ' '                       changedElementLanguage
	              , cv.elementid              changedElementId
	              , cv.conceptid              changedElementVersionId
	              , ev.changedfromversionid   changedFromVersionId
	              , sv.basestructureid        basecontextid
	              , sev.structureid           changeContextId
	            from structureelementversion sev, elementversion ev, structureversion sv, conceptversion cv
	            where sev.structureid = #{contextId} 
	                and sev.elementversionid = ev.elementversionid
	                and cv.conceptid = ev.elementversionid
	                and ev.classid in ( select classid from class c where c.tablename = 'ConceptVersion' 
	                                           and c.classname in ('ClassificationRoot', 'Section', 'Block', 'Group', 'Rubric', 'CCICODE', 'Chapter', 'Category',
	                                                               'AlphabeticIndex', 'ExternalInjuryIndex', 'NeoplasmIndex', 'DrugsAndChemicalsIndex', 'Index', 'Supplement',
	                                                               'BookIndex', 'LetterIndex')
	                                   )
	                and sv.structureid = sev.structureid
	                and cv.elementid = #{domainElementId}
	    )
	    , conceptStatus as (  select
                      (select status from conceptversion cv, structureelementversion sev
                              where sev.structureid = cc.basecontextid
                              and sev.elementversionid = cv.conceptid
                              and cv.elementid = cc.changedElementId
                      ) as baseStatus
                    , 'status'  fieldname
                    , 'ConceptVersion' tablename
                    ,(select status from conceptversion where conceptid = cc.changedFromVersionId) as oldstatus
                    , cc.*
                    from conceptChanges cc
	    )
	    , conceptStatusWithConflict as (
	    			select decode(decode(basestatus, oldstatus, 'no_conflict', basestatus), '', 'no_value', decode(basestatus, oldstatus, 'no_conflict', basestatus)) conflict
	    			       , cs.*
	    			from conceptStatus cs
	    )
	    
	  select cs.changedElementVersionId, cs.tablename, cs.fieldname || ' ' || cs.changedElementLanguage as fieldname,  cs.oldstatus as oldValue, cs.changedValue, decode(cs.conflict, 'no_conflict', 'no_conflict', decode(cs.conflict, changedValue, 'no_conflict', cs.conflict)) conflict
      from conceptStatusWithConflict cs
   </select>
   
    <select id="findRealizedStatus" resultType="java.lang.String" parameterType="java.util.Map">
          select cv.status realizedStatus           
          from structureelementversion sev, elementversion ev, structureversion sv, conceptversion cv
          where  sv.change_request_id = #{changeRequestId}
               and sv.contextstatus = 'CLOSED'
              and sev.elementversionid = ev.elementversionid
              and cv.conceptid = ev.elementversionid
              and ev.classid in ( select classid from class c where c.tablename = 'ConceptVersion' 
                                         and c.classname in ('ClassificationRoot', 'Section', 'Block', 'Group', 'Rubric', 'CCICODE', 'Chapter', 'Category',
                                                             'AlphabeticIndex', 'ExternalInjuryIndex', 'NeoplasmIndex', 'DrugsAndChemicalsIndex', 'Index', 'Supplement',
                                                             'BookIndex', 'LetterIndex')
	                                   )
              and sv.structureid = sev.structureid
              and cv.elementid = #{domainElementId}
              and sev.structureid =  (               
                                      select max(sv.structureid)
						              from structureversion sv, structureelementversion sev, elementversion ev
						              where sv.change_request_id = #{changeRequestId}
						                 and sv.contextStatus='CLOSED'
						                 and sev.structureid = sv.structureid
						                 and ev.elementversionid = sev.elementversionid
						                 and ev.elementid = #{domainElementId} 
									)
   </select>
   
   <select id="findRealizedStatusChanges" resultMap="RealizedChangeMap" parameterType="java.util.Map">
   		  -- Get the changes on concept (i.e., concept status)
		  With conceptChanges as (
		          select 
		              cv.classid                realizedElementClassId
		            , cv.status                 realizedValue
		            , ' '                       realizedElementLanguage
		            , cv.elementid              realizedElementId
		            , cv.conceptid              realizedElementVersionId
		            , ev.changedfromversionid   changedFromVersionId
		          from structureelementversion sev, elementversion ev, structureversion sv, conceptversion cv
		          where  sv.change_request_id = #{changeRequestId}
		               and sv.contextstatus = 'CLOSED'
		              and sev.elementversionid = ev.elementversionid
		              and cv.conceptid = ev.elementversionid
		              and ev.classid in ( select classid from class c where c.tablename = 'ConceptVersion' 
		                                         and c.classname in ('ClassificationRoot', 'Section', 'Block', 'Group', 'Rubric', 'CCICODE', 'Chapter', 'Category',
	                                                                 'AlphabeticIndex', 'ExternalInjuryIndex', 'NeoplasmIndex', 'DrugsAndChemicalsIndex', 'Index', 'Supplement',
	                                                                 'BookIndex', 'LetterIndex')
	                                   )
		              and sv.structureid = sev.structureid
		              and cv.elementid = #{domainElementId}
		  )
		  , conceptStatus as (  select
		                              'status'  fieldname
		                            , 'ConceptVersion' tablename
		                            ,(select status from conceptversion where conceptid = cc.changedFromVersionId) as oldstatus
		                            , cc.*                           
		                         from conceptChanges cc
		  )
		  
	   	select cs.realizedElementVersionId, cs.tablename, cs.fieldname || ' ' || cs.realizedElementLanguage as fieldname,  cs.oldstatus as oldValue, cs.realizedValue 
	    from conceptStatus cs
	    order by realizedElementVersionId
    
   </select>
  
   
   <select id="findXmlTextFromXmlPropertyId" resultType="java.lang.String" parameterType="java.lang.Long">
      select xmltext from xmlpropertyversion where xmlpropertyid = #{xmlpropertyid} 
   </select>
   
    <select id="findHtmlTextFromHtmlPropertyId" resultType="java.lang.String" parameterType="java.lang.Long">
      select htmltext from htmlpropertyversion where htmlpropertyid = #{htmlpropertyid} 
   </select>
   
   <select id="findMaxStructureId" resultType="java.lang.Long" parameterType="java.lang.Long">
        select max(sv.structureid)
		from structureversion sv
		where sv.change_request_id = #{changeRequestId}
   </select>
  
  <select id="findModifiedConceptElementCodes" resultMap="ConceptModificationMap" parameterType="java.util.Map">
   with strelementversion as ( 
         select /*+ USE_NL(sev s) */ sev.* from structureelementversion sev, structureversion s 
         where s.structureid = sev.structureid 
         and s.change_request_id = #{changeRequestId}
      )   
      , changedElement as( 
      select  /*+ RESULT_CACHE*/ distinct structureid, domainelementid, validationId, dataHolding
      from( 
            select sev.structureid, pv.domainelementid as domainelementid, 0  as validationId, '' as dataHolding
            from strelementversion sev, propertyversion pv
            where sev.elementversionid = pv.propertyid
            and pv.classid not in (select classid from class c where className in('LongPresentation', 
                                                                                  'ShortPresentation',
                                                                                   'SexValidationIndicator', 
                                                                                   'ValidationMRDiag', 
                                                                                   'ValidationDiagType1Flag',
                                                                                   'ValidationDiagType2Flag',
                                                                                   'ValidationDiagType3Flag',
                                                                                   'ValidationDiagType4Flag',
                                                                                   'ValidationDiagType6Flag',
                                                                                   'ValidationDiagType9Flag',
                                                                                   'ValidationDiagTypeWFlag',
                                                                                   'ValidationDiagTypeXFlag',
                                                                                   'ValidationDiagTypeYFlag',
                                                                                   'ValidationNewbornFlag',
                                                                                   'ValidationICDCPV',
                                                                                   'ValidationCCICPV',
                                                                                   'ValidationFacility',
                                                                                   'ValidationDefinition',
                                                                                   'AgeMinimum',
                                                                                   'AgeMaximum'))  

            union all 
            select sev.structureid, cv.elementid as domainelementid, 0 as validationId, '' as dataHolding
            from strelementversion sev, conceptversion cv 
            where sev.elementversionid = cv.conceptid  
            and cv.classid not in (select classid from class c where className in( 'SexValidation', 
                                                                       'ValidationICD', 
                                                                       'ValidationCCI',
                                                                       'Validation'
                                                                       ))
                                                                       
            union all
            select sev.structureid, cims_util.getValidationRuleTabularId(#{maxStructureId}, xpv.domainelementid) as domainelementid, 
                   xpv.domainelementid as validationId,
                   cims_util.getValidationRuleDHDescription(#{maxStructureId}, xpv.domainelementid, 'ENG') as dataHolding
            from xmlpropertyversion xpv, strelementversion sev 
                  where sev.elementversionid = xpv.xmlpropertyid
                  and xpv.classid in (#{ICDValidationDefinition}, #{CCIValidationDefinition})
                  
            union all 
            select sev.structureid, cims_util.getValidationRuleTabularId(#{maxStructureId}, cv.elementid) as domainelementid, 
            	   cv.elementid as validationId,
            	   cims_util.getValidationRuleDHDescription(#{maxStructureId}, cv.elementid, 'ENG') as dataHolding
            from strelementversion sev, conceptversion cv 
            where sev.elementversionid = cv.conceptid  
            and cv.classid in (select classid from class c where className in('ValidationICD', 'ValidationCCI' ))
         )           
      ) 
      select structureid, domainelementid, validationId, cims_util.getTextProperty(elemId => domainelementid, classnme => 'Code', language => null, strid => #{maxStructureId}) code
      from changedElement 
      where domainelementid is not null       
      order by replace(code, '^', ''), dataHolding, structureid   
  </select>	
  
  
 
  <select id="findConflictRealizedByChangeRequestId" resultType="java.lang.Long" >
             select  originatingSv.change_request_id  realizedByCR
                 from  structureelementversion sev , structureversion sv, structureelementversion baseSev ,elementversion baseEv, structureversion originatingSv
                 where sev.elementversionid = #{currentElementVersionID} 
                    and sv.structureid = #{currentContextId} 
                    and baseSev.structureid = sv.basestructureid
                    and baseSev.elementid = sev.elementid
                    and baseSev.elementversionid= baseEv.elementversionid
                    and  baseEv.originatingcontextid= originatingSv.structureid                
                   
  </select>
 
 
  <select id="findConflictRealizedByContext" resultMap="ca.cihi.cims.data.mapper.ContextMapper.ContextIdentificationMap" >
             select originatingSv.STRUCTUREID, 
                    originatingSv.BASESTRUCTUREID, 
                    originatingSv.CONTEXTSTATUS, 
                    originatingSv.CONTEXTSTATUSDATE, 
                    originatingSv.ISVERSIONYEAR,
                    c.CLASSNAME, 
                    baseEv.VERSIONCODE,
                    originatingSv.CHANGE_REQUEST_ID
                 from  structureelementversion sev , structureversion sv, structureelementversion baseSev ,elementversion baseEv, structureversion originatingSv,CLASS c
                 where sev.elementversionid = #{currentElementVersionID} 
                    and sv.structureid = #{currentContextId} 
                    and baseSev.structureid = sv.basestructureid
                    and baseSev.elementid = sev.elementid
                    and baseSev.elementversionid= baseEv.elementversionid
                    and baseEv.originatingcontextid= originatingSv.structureid    
                    and originatingSv.CLASSID = c.CLASSID            
  </select>
 
 
 
 
 
 
   <select id="findProposedTabularChanges" resultMap="ProposedChangeMap">
     -- get the change data on the text fields
    with textChanges as (
                    select 
                      ev.classid                changedElementClassId
                    , decode(tpv.text, '', 'no_value', tpv.text)  changedValue
                    , tpv.languagecode          changedElementLanguage
                    , ev.elementid              changedElementId
                    , ev.elementversionid       changedElementVersionId
                    , ev.changedfromversionid   changedFromVersionId
                    , sv.basestructureid        basecontextid
                    , sev.structureid           changeContextId
                    from structureelementversion sev, elementversion ev, structureversion sv, textpropertyversion tpv
                    where sev.structureid = #{contextId} 
                    and sev.elementversionid = ev.elementversionid
                    and sv.structureid = sev.structureid
                    and tpv.textpropertyid = ev.elementversionid
                    and tpv.domainelementid = #{domainElementId}
    )
    , textprops as ( select   
                     (select text from textpropertyversion tpv, structureelementversion sev
                      where sev.structureid = tc.basecontextid
                      and sev.elementversionid = tpv.textpropertyid
                      and tpv.elementid = tc.changedElementId
                      ) as baseValue
                      , c.friendlyname  fieldname
                      , c.tablename
                      ,(select text from textpropertyversion where textpropertyid = tc.changedFromVersionId) as oldValue
                      , tc.*
                  from textChanges tc, class c
                  where tc.changedElementClassId = c.classid
    )
    , textpropsWithConflict as(
                 select decode(decode(baseValue, oldValue, 'no_conflict', baseValue), '', 'no_value', decode(baseValue, oldValue, 'no_conflict', baseValue)) as conflict
                        , tp.*
                 from textprops tp
    ),
    
    -- get the change data on the boolean fields
    booleanChanges as (
                  select 
                    ev.classid                changedElementClassId
                  , decode(bpv.booleanvalue, 'Y', 'Yes', 'No')  changedValue
                  , ' '                       changedElementLanguage
                  , ev.elementid              changedElementId
                  , ev.elementversionid       changedElementVersionId
                  , ev.changedfromversionid   changedFromVersionId
                  , sv.basestructureid        basecontextid
                  , sev.structureid           changeContextId
                  from structureelementversion sev, elementversion ev, structureversion sv, booleanpropertyversion bpv
                  where sev.structureid = #{contextId} 
                  and sev.elementversionid = ev.elementversionid
                  and sv.structureid = sev.structureid
                  and bpv.booleanpropertyid = ev.elementversionid
                  and bpv.domainelementid = #{domainElementId}
    )
    , booleanprops as ( select 
                          (select decode(bpv.booleanvalue, 'Y', 'Yes', 'No') 
                            from booleanpropertyversion bpv, structureelementversion sev
                            where sev.structureid = bc.basecontextid
                            and sev.elementversionid = bpv.booleanpropertyid
                            and bpv.elementid = bc.changedElementId
                          ) as baseValue
                          , c.friendlyname fieldname
                          , c.tablename
                          , (select decode(booleanvalue, 'Y', 'Yes', 'No') from booleanpropertyversion where booleanpropertyid = bc.changedFromVersionId) as oldValue
                          , bc.*
                        from booleanChanges bc, class c 
                        where bc.changedElementClassId = c.classid
    )     
    , boolpropsWithConflict as(
                 select decode(baseValue, oldValue, 'no_conflict', baseValue) as conflict
                        , bp.*
                 from booleanprops bp
    ),
    
    -- get the change data on the xml fields
   xmlChanges as (
                    select 
                      ev.classid                changedElementClassId   
                    , decode(dbms_lob.compare( xpv.xmltext, empty_clob()), 0, to_clob('no_value'), xpv.xmltext) changedXmlValue           
                    , decode(dbms_lob.compare( xpv.xmltext, empty_clob()), 0, 'no_value', to_char(xpv.xmlpropertyid))  changedValue
                    , xpv.languagecode          changedElementLanguage
                    , ev.elementid              changedElementId
                    , ev.elementversionid       changedElementVersionId
                    , ev.changedfromversionid   changedFromVersionId
                    , (decode(nvl(ev.changedfromversionid, 0), 0, to_clob('no_value'), 
                       (select xpv2.xmltext from xmlpropertyversion xpv2 where xpv2.xmlpropertyid = ev.changedfromversionid))) changedFromXmlValue
                    , sv.basestructureid        basecontextid
                    , sev.structureid           changeContextId
                    from structureelementversion sev, elementversion ev, structureversion sv, xmlpropertyversion xpv
                    where sev.structureid = #{contextId}
                    and sev.elementversionid = ev.elementversionid
                    and sv.structureid = sev.structureid
                    and xpv.xmlpropertyid = ev.elementversionid
                    and xpv.domainelementid = #{domainElementId}
    )   
   , xmlprops as ( 
                  select 
                      (select xpv.xmltext from xmlpropertyversion xpv, structureelementversion sev
                      where sev.structureid = xc.basecontextid
                      and sev.elementversionid = xpv.xmlpropertyid
                      and xpv.elementid = xc.changedElementId
                      ) as baseXValue
                  , (select to_char(xpv.xmlpropertyid) from xmlpropertyversion xpv, structureelementversion sev
                          where sev.structureid = xc.basecontextid
                          and sev.elementversionid = xpv.xmlpropertyid
                          and xpv.elementid = xc.changedElementId
                      ) as baseXPropertyId
                  , c.friendlyname fieldname  
                  , c.tablename        
                  , decode(dbms_lob.compare( xc.changedFromXmlValue, to_clob('no_value')), 0, 'no_value', to_char(xc.changedFromVersionId)) oldValue
                  , xc.*
                  from xmlChanges xc,class c 
                  where xc.changedElementClassId = c.classid
                  and not (dbms_lob.compare(changedFromXmlValue, to_clob('no_value')) = 0 and dbms_lob.compare(changedXmlValue, empty_clob()) = 0)
    ) 
    , xmlpropsWithBaseHtmlValue as (
                  select nvl(xp.baseXValue, 'no_value') as baseXmlValue, 
                  nvl(xp.baseXPropertyId, 'no_value') as baseXmlPropertyId, 
                  xp.* 
                  from xmlprops  xp 
    )  
    , xmlpropsWithConflict as(
          select decode(length(decode(dbms_lob.compare(baseXmlValue, changedFromXmlValue), 0, to_clob('no_conflict'), baseXmlValue)), 0, to_clob('no_value'), 
                         decode(dbms_lob.compare(baseXmlValue, changedFromXmlValue), 0, to_clob('no_conflict'), baseXmlValue))  conflictXmlValue
                        , xp.*
                 from xmlpropsWithBaseHtmlValue xp
    ),
    
    
    -- get the change data on the table field
    htmlChanges as (
                    select 
                      ev.classid                changedElementClassId
                    , decode(dbms_lob.compare( hpv.htmltext, empty_clob()), 0, to_clob('no_value'), hpv.htmltext) changedHtmlValue           
                    , decode(dbms_lob.compare( hpv.htmltext, empty_clob()), 0, 'no_value', to_char(hpv.htmlpropertyid))  changedValue
                    , hpv.languagecode          changedElementLanguage
                    , ev.elementid              changedElementId
                    , ev.elementversionid       changedElementVersionId
                    , ev.changedfromversionid   changedFromVersionId
                    , (decode(nvl(ev.changedfromversionid, 0), 0, to_clob('no_value'), 
                       (select hpv2.htmltext from htmlpropertyversion hpv2 where hpv2.htmlpropertyid = ev.changedfromversionid))) changedFromHtmlValue
                    , sv.basestructureid        basecontextid
                    , sev.structureid           changeContextId
                    from structureelementversion sev, elementversion ev, structureversion sv, htmlpropertyversion hpv
                    where sev.structureid = #{contextId}
                    and sev.elementversionid = ev.elementversionid
                    and ev.classid not in (select classid from class c where className in('LongPresentation', 'ShortPresentation'))
                    and sv.structureid = sev.structureid
                    and hpv.htmlpropertyid = ev.elementversionid
                    and hpv.domainelementid = #{domainElementId}
    )
    , htmlprops as ( 
                select    				  
                      (select hpv.htmltext from htmlpropertyversion hpv, structureelementversion sev
                        where sev.structureid = hc.basecontextid
                        and sev.elementversionid = hpv.htmlpropertyid
                        and hpv.elementid = hc.changedElementId
                      ) as baseHValue 
                  , 
		                 (select to_char(hpv.htmlpropertyid) from htmlpropertyversion hpv, structureelementversion sev
		                      where sev.structureid = hc.basecontextid
		                      and sev.elementversionid = hpv.htmlpropertyid
		                      and hpv.elementid = hc.changedElementId
                      ) as baseHPropertyId
                  , c.friendlyname fieldname  
                  , c.tablename  
                  , decode(dbms_lob.compare( hc.changedFromHtmlValue, to_clob('no_value')), 0, 'no_value', to_char(hc.changedFromVersionId)) oldValue
                  , hc.*
                  from htmlChanges hc,class c 
                  where hc.changedElementClassId = c.classid
                  and not (dbms_lob.compare(changedFromHtmlValue, to_clob('no_value')) = 0 and dbms_lob.compare(changedHtmlValue, empty_clob()) = 0)
    ) , 
    htmlpropsWithBaseHtmlValue as (
                  select nvl(hp.baseHValue, 'no_value') as baseHtmlValue, 
                  nvl(hp.baseHPropertyId, 'no_value') as baseHtmlPropertyId, 
                  hp.* 
                  from htmlprops  hp                 
    ) 
    , htmlpropsWithConflict as(
    			 select decode(length(decode(dbms_lob.compare(baseHtmlValue, changedFromHtmlValue), 0, to_clob('no_conflict'), baseHtmlValue)), 0, to_clob('no_value'), 
    			               decode(dbms_lob.compare(baseHtmlValue, changedFromHtmlValue), 0, to_clob('no_conflict'), baseHtmlValue))  conflictHtmlValue
                        , hp.*
                 from htmlpropsWithBaseHtmlValue hp
    ),
    
    -- Get the changes on concept (i.e., concept status)
    conceptChanges as (
            select 
                cv.classid                changedElementClassId
              , cv.status                 changedValue
              , ' '                       changedElementLanguage
              , cv.elementid              changedElementId
              , cv.conceptid              changedElementVersionId
              , ev.changedfromversionid   changedFromVersionId
              , sv.basestructureid        basecontextid
              , sev.structureid           changeContextId
            from structureelementversion sev, elementversion ev, structureversion sv, conceptversion cv
            where sev.structureid = #{contextId} 
                and sev.elementversionid = ev.elementversionid
                and cv.conceptid = ev.elementversionid
                and ev.classid in ( select classid from class c where c.tablename = 'ConceptVersion' 
                                           and c.classname in ('ClassificationRoot', 'Section', 'Block', 'Group', 'Rubric', 'CCICODE', 'Chapter', 'Category'))
                and sv.structureid = sev.structureid
                and cv.elementid = #{domainElementId}
    )
    , conceptStatus as (  select
                      (select status from conceptversion cv, structureelementversion sev
                              where sev.structureid = cc.basecontextid
                              and sev.elementversionid = cv.conceptid
                              and cv.elementid = cc.changedElementId
                      ) as baseStatus
                    , 'status'  fieldname
                    , 'ConceptVersion' tablename
                    ,(select status from conceptversion where conceptid = cc.changedFromVersionId) as oldstatus                   
                    , cc.*
                    from conceptChanges cc
    )    
    , conceptStatusWithConflict as(
                 select decode(decode(baseStatus, oldstatus, 'no_conflict', baseStatus), '', 'no_value', decode(baseStatus, oldstatus, 'no_conflict', baseStatus)) as conflict
                        , cs.*
                 from conceptStatus cs
    ),
    
    -- get the change data on the concept property fields (i.e., daggerAsterisk)
    conceptPropertyChanges as (
      select 
             ev.classid                changedElementClassId
           , cpv.rangeelementid        changedRangeId
           , (select decode(tpv.text, '', 'no_value', tpv.text) from TextPropertyVersion tpv,  structureelementversion sev 
                where tpv.classid in (select classid from class where classname = 'DomainValueCode') 
                and domainelementid = cpv.rangeelementid
                and sev.elementversionid = tpv.textpropertyid
                and sev.structureid = sv.basestructureid
                ) changedValue
           , ' '                       changedElementLanguage
           , ev.elementid              changedElementId
           , ev.elementversionid       changedElementVersionId
           , ev.changedfromversionid   changedFromVersionId
           , sv.basestructureid        basecontextid
           , sev.structureid           changeContextId
      from structureelementversion sev, elementversion ev, structureversion sv, conceptpropertyversion cpv
      where sev.structureid = #{contextId}
      and sev.elementversionid = ev.elementversionid
      and ev.classid not in (select classid from class c where className in('LongPresentation', 'ShortPresentation', 'Narrower'))
      and sv.structureid = sev.structureid
      and cpv.conceptpropertyid = ev.elementversionid
      and cpv.domainelementid = #{domainElementId}
    )
    ,conceptprops as 
    (
        select (
              select rangeelementid from conceptpropertyversion cpv, structureelementversion sev
              where sev.structureid = cpc.basecontextid
              and cpv.elementid = cpc.changedElementId
              and cpv.conceptpropertyid = sev.elementversionid        
            ) as baseRangeId
            , c.friendlyname fieldname
            , c.tablename
            ,(
              select nvl(rangeelementid, '') from conceptpropertyversion
              where conceptpropertyid = cpc.changedFromVersionId
            ) as oldRangeId
          , cpc.*
        from conceptPropertyChanges cpc, class c
        where cpc.changedElementClassId = c.classid
    ),
    conceptPropsWithConflict as (
         select
           (select decode(tpv.text, '', 'no_value', tpv.text) from TextPropertyVersion tpv,  structureelementversion sev 
              where tpv.classid in (select classid from class where classname = 'DomainValueCode') 
              and domainelementid = oldRangeId
              and sev.elementversionid = tpv.textpropertyid
              and sev.structureid = basecontextid
           ) oldValue, 
           decode(baseRangeId, oldRangeId, 'no_conflict', 
                   (select decode(tpv.text, '', 'no_value', tpv.text) from TextPropertyVersion tpv,  structureelementversion sev 
                          where tpv.classid in (select classid from class where classname = 'DomainValueCode') 
                          and domainelementid = baseRangeId
                          and sev.elementversionid = tpv.textpropertyid
                          and sev.structureid = basecontextid
                   )) conflict
           , cp.*
         from conceptprops cp
         where not(cp.changedValue = 'no_value' and oldRangeId = '')
    ) 
    
    -- Get all proposed change data
    select changedElementVersionId, tablename, fieldname, oldValue, changedValue, decode(conflict, '', 'no_value', conflict) conflict 
    from (
      select t.changedElementVersionId, t.tablename, t.fieldname || ' ' || t.changedElementLanguage as fieldname,  t.oldValue, t.changedValue, decode(conflict, 'no_conflict', 'no_conflict', decode(conflict, changedValue, 'no_conflict', conflict)) conflict, decode(t.fieldname, 'Code', 1, 2) as cid
      from textpropsWithConflict t
        
      union all
        
      select bp.changedElementVersionId, bp.tablename, bp.fieldname || ' ' || bp.changedElementLanguage as fieldname,  bp.oldValue, bp.changedValue, decode(conflict, 'no_conflict', 'no_conflict', decode(conflict, changedValue, 'no_conflict', conflict)) conflict, 2 as cid
      from boolpropsWithConflict bp
        
      union all
        
      select xp.changedElementVersionId, xp.tablename, xp.fieldname || ' ' || xp.changedElementLanguage as fieldname, xp.oldValue, decode(dbms_lob.compare(xp.changedFromXmlValue, xp.changedXmlValue), 0, xp.oldValue, xp.changedValue) changedValue, 
      decode(dbms_lob.compare(conflictXmlValue, to_clob('no_conflict')), 0, 'no_conflict', '', 'no_conflict', decode(dbms_lob.compare(conflictXmlValue, changedXmlValue), 0, 'no_conflict', baseXmlPropertyId)) conflict , 2 as cid
      from xmlpropsWithConflict xp
            
      union all
      
      select hp.changedElementVersionId, hp.tablename, hp.fieldname || ' ' || hp.changedElementLanguage as fieldname,  hp.oldValue, decode(dbms_lob.compare(hp.changedFromHtmlValue, hp.changedHtmlValue), 0, hp.oldValue, hp.changedValue) changedValue,
      decode(dbms_lob.compare(conflictHtmlValue, to_clob('no_conflict')), 0, 'no_conflict', '', 'no_conflict', decode(dbms_lob.compare(conflictHtmlValue, changedHtmlValue), 0, 'no_conflict', baseHtmlPropertyId)) conflict, 2 as cid
      from htmlpropsWithConflict hp
        
      union all
        
      select cs.changedElementVersionId, cs.tablename, cs.fieldname || ' ' || cs.changedElementLanguage as fieldname,  cs.oldstatus as oldValue, cs.changedValue, decode(conflict, 'no_conflict', 'no_conflict', decode(conflict, changedValue, 'no_conflict', conflict)) conflict, 1 as cid
      from conceptStatusWithConflict cs
        
      union all
        
      select cp.changedElementVersionId, cp.tablename, cp.fieldname || ' ' || cp.changedElementLanguage as fieldname, cp.oldValue, cp.changedValue,  decode(conflict, 'no_conflict', 'no_conflict', decode(conflict, changedValue, 'no_conflict', conflict)) conflict,  2 as cid
      from conceptPropsWithConflict cp   
      order by cid, fieldname, changedElementVersionId 
    )     
 </select> 
 
  <select id="findProposedValidationChanges" resultMap="ProposedChangeMap" parameterType="java.util.Map">
     -- get the change data on the validation definition property
    with validationPropertyChanges as(
           select cims_util.getConceptStatus(#{validationId}, #{contextId}) as validationStatus,
                  cims_util.getConceptStatus(#{validationId}, cims_util.getBaseClassifIDForContextID(#{contextId})) as baseStatus,
                  cims_util.getValidationRuleDHDescription(#{contextId}, #{validationId}, 'ENG') as dataHolding,
                  xpv.classid         changedElementClassId, 
                  xpv.xmlpropertyid   changedElementVersionId,
                  decode(to_char(xpv.xmltext), '', 'no_value', to_char(xpv.xmltext))   changedValue, 
                  xpv.elementid       changedElementId,
                  (select ev.changedfromversionid from elementversion ev where ev.elementversionid = xpv.xmlpropertyid) as  changedFromVersionId,
                  cims_util.getBaseClassifIDForContextID(#{contextId})   basecontextid,
                  (select xpv1.xmlpropertyid from xmlpropertyversion xpv1, structureelementversion sev1
                   where xpv1.xmlpropertyid = sev1.elementversionid
                   and sev1.structureid = cims_util.getBaseClassifIDForContextID(#{contextId}) 
                   and xpv1.elementid = xpv.elementid)            basePropertyId
           from xmlpropertyversion xpv, structureelementversion sev
           where xpv.domainelementid = #{validationId}
           and xpv.xmlpropertyid = sev.elementversionid
           and sev.structureid =  #{contextId}     
        ), 
        
        validationValueChange as(
          select 
            (select to_char(xpv.xmltext) from XMLPropertyVersion xpv where xpv.xmlpropertyid = vpc.basePropertyId) as baseValue,
            vpc.*,
            (select to_char(xpv.xmltext) from XMLPropertyVersion xpv, conceptversion cv, structureelementversion sev
                where xpv.xmlpropertyid = vpc.changedFromVersionId
                and xpv.domainelementid = cv.elementid
                --and cv.status != 'DISABLED'
                and sev.structureid = vpc.basecontextid
                and sev.elementversionid = cv.conceptid) oldValue
          from validationPropertyChanges vpc
        ),
        valValueChangeWithConflict as (
        	select decode(decode(baseValue, oldValue, 'no_conflict', baseValue), '', 'no_value', decode(baseValue, oldValue, 'no_conflict', baseValue)) conflict
        		  , vvc.*
        	from  validationValueChange vvc
        ),
        
       -- Get the changes on validation status
      validationChanges as (
              select 
                  cv.classid                changedElementClassId
                , cv.status                 changedValue
                , ' '                       changedElementLanguage
                , cv.elementid              changedElementId
                , cv.conceptid              changedElementVersionId
                , ev.changedfromversionid   changedFromVersionId
                , sv.basestructureid        basecontextid
                , sev.structureid           changeContextId
              from structureelementversion sev, elementversion ev, structureversion sv, conceptversion cv
              where sev.structureid = #{contextId} 
                  and sev.elementversionid = ev.elementversionid
                  and cv.conceptid = ev.elementversionid
                  and ev.classid in (#{validationCCIcid}, #{validationICDcid})
                  and sv.structureid = sev.structureid
                  and cv.elementid = #{validationId}
                 and cv.status = 'DISABLED'
      )
      , validationStatus as (  
                 select
                    (select status from conceptversion cv, structureelementversion sev
                            where sev.structureid = vc.basecontextid
                            and sev.elementversionid = cv.conceptid
                            and cv.elementid = vc.changedElementId
                    ) as baseStatus
                  ,(select status from conceptversion where conceptid = vc.changedFromVersionId) as oldstatus
                  , vc.*
                  from validationChanges vc
      )
      , validationStatusWithConflict as(
      			select decode(decode(basestatus, oldstatus, 'no_conflict', basestatus), '', 'no_value', decode(basestatus, oldstatus, 'no_conflict', basestatus)) conflict
      			, vs.*
      			from validationStatus vs
      )
         
       select vp.changedElementVersionId
             ,'ValidationDefinition' as tablename
             , vp.dataHolding as fieldname
             , decode(vp.baseStatus, 'DISABLED', '',vp.oldValue) oldValue
             , to_char(vp.changedValue) changedValue
             , decode(vp.conflict, 'no_conflict', 'no_conflict', decode(vp.conflict, changedValue, 'no_conflict', vp.conflict)) conflict
      from valValueChangeWithConflict vp 
      where not (vp.basevalue = null and vp.validationstatus = 'DISABLED')
      
      union all
      select  vs.changedElementVersionId
            , 'ValidationStatus' as tablename
          , cims_util.getValidationRuleDHDescription(#{contextId}, #{validationId}, 'ENG') as fieldname
          , (select to_char(xpv.xmltext) 
             from xmlpropertyversion xpv, structureelementversion sev, validationStatus vs1 
             where xpv.domainelementid = vs1.changedElementId 
                and xpv.xmlpropertyid = sev.elementversionid 
                and sev.structureid = vs1.basecontextid) as oldValue
          , vs.changedValue  
            , decode(vs.conflict, 'no_conflict', 'no_conflict', decode(vs.conflict, changedValue, 'no_conflict', vs.conflict))conflict            
      from validationStatusWithConflict vs 
      order by fieldname
      
  </select>
  
  <select id="findRealizedValidationChanges" resultMap="RealizedChangeMap" parameterType="java.util.Map">	
    -- get the change data on the validation definition property
    with validationPropertyChanges as(
           select cims_util.getConceptStatus(#{validationId}, #{structureId}) as validationStatus
                  , cims_util.getValidationRuleDHDescription(#{structureId}, #{validationId}, 'ENG') as dataHolding
                  , xpv.xmlpropertyid   realizedElementVersionId
                  , xpv.xmltext         realizedValue
                  , cims_util.getBaseClassifIDForContextID(#{structureId})   basecontextid
                  , (select ev.changedfromversionid from elementversion ev where ev.elementversionid = xpv.xmlpropertyid) as  changedFromVersionId
           from xmlpropertyversion xpv, structureelementversion sev, structureversion sv
           where xpv.domainelementid = #{validationId}           
           and xpv.xmlpropertyid = sev.elementversionid
           and sev.structureid = #{structureId}
           and sev.structureid = sv.structureid
           and sv.contextstatus = 'CLOSED'
        ),  
        
       -- Get the changes on validation status
      validationChanges as (
                select cv.status            realizedValue
                , cv.elementid              realizedElementId
                , cv.conceptid              realizedElementVersionId
                , ev.changedfromversionid   changedFromVersionId
                , sv.basestructureid        basecontextid
              from structureelementversion sev, elementversion ev, structureversion sv, conceptversion cv
              where sv.contextstatus = 'CLOSED'
                  and sv.structureid = #{structureId}
                  and sev.elementversionid = ev.elementversionid
                  and cv.conceptid = ev.elementversionid
                  and ev.classid in (#{validationCCIcid}, #{validationICDcid})
                  and sv.structureid = sev.structureid
                  and cv.elementid = #{validationId}
      )         
       select vp.realizedElementVersionId
             ,'ValidationDefinition' as tablename
             , vp.dataHolding as fieldname
             , (select to_char(xpv.xmltext) from XMLPropertyVersion xpv, conceptversion cv, structureelementversion sev
                where xpv.xmlpropertyid = vp.changedFromVersionId
                and xpv.domainelementid = cv.elementid
                and cv.status != 'DISABLED'
                and sev.structureid = vp.basecontextid
                and sev.elementversionid = cv.conceptid
                and 'ACTIVE' = NVL(( select oldC.status from conceptversion cv, elementversion ev, conceptversion oldC, structureelementversion sev
                                 where cv.conceptid = ev.elementversionid
                                 and cv.elementid = #{validationId}
                                 and oldC.conceptid = ev.changedfromversionid
                                 and sev.structureid = #{structureId}
                                 and cv.conceptid = sev.elementversionid ), 'ACTIVE') 
                ) oldValue
             , to_char(vp.realizedValue) realizedValue
       from validationPropertyChanges vp 
      
      union all
      select vc.realizedElementVersionId
          , 'ValidationStatus' as tablename
          , cims_util.getValidationRuleDHDescription(#{structureId}, #{validationId}, 'ENG') as fieldname
          , (select to_char(xpv.xmltext) 
             from xmlpropertyversion xpv, structureelementversion sev, validationChanges vc1 
             where xpv.domainelementid = vc1.realizedElementId 
                and xpv.xmlpropertyid = sev.elementversionid 
                and sev.structureid = vc1.basecontextid
                and 'ACTIVE' = NVL(( select oldC.status from conceptversion cv, elementversion ev, conceptversion oldC, structureelementversion sev
                                 where cv.conceptid = ev.elementversionid
                                 and cv.elementid = #{validationId}
                                 and oldC.conceptid = ev.changedfromversionid
                                 and sev.structureid = #{structureId}
                                 and cv.conceptid = sev.elementversionid), 'ACTIVE')
            ) as oldValue
          , vc.realizedValue              
      from validationChanges vc
      order by fieldname
  </select>
  
  <select id="findRealizedTabularChanges" resultMap="RealizedChangeMap" parameterType="java.util.Map">	
    -- get the change data on the text fields
    with textChanges as (
                    select 
                          ev.classid                realizedElementClassId
                        , tpv.text                  realizedValue
                        , tpv.languagecode          realizedElementLanguage
                        , ev.elementid              realizedElementId
                        , ev.elementversionid       realizedElementVersionId
                        , ev.changedfromversionid   changedFromVersionId
                    from structureelementversion sev, elementversion ev, structureversion sv, textpropertyversion tpv
                    where sv.change_request_id = #{changeRequestId}
                          and sv.contextstatus = 'CLOSED'
                          and sev.elementversionid = ev.elementversionid
                          and sv.structureid = sev.structureid
                          and tpv.textpropertyid = ev.elementversionid
                          and tpv.domainelementid = #{domainElementId}        
    ),
    textprops as ( select c.friendlyname fieldname
                          , c.tablename
                          , (select text from textpropertyversion where textpropertyid = tc.changedFromVersionId) as oldValue 
                          , tc.*
                  from textChanges tc, class c
                  where tc.realizedElementClassId = c.classid
    ),
    
    -- get the change data on the boolean fields
    booleanChanges as (
                  select 
                        ev.classid                realizedElementClassId
                      , decode(bpv.booleanvalue, 'Y', 'Yes', 'No')  realizedValue
                      , ' '                       realizedElementLanguage
                      , ev.elementid              realizedElementId
                      , ev.elementversionid       realizedElementVersionId
                      , ev.changedfromversionid   changedFromVersionId
                  from structureelementversion sev, elementversion ev, structureversion sv, booleanpropertyversion bpv
                  where sv.change_request_id = #{changeRequestId}
                        and sv.contextstatus = 'CLOSED'
                        and sev.elementversionid = ev.elementversionid
                        and sv.structureid = sev.structureid
                        and bpv.booleanpropertyid = ev.elementversionid
                        and bpv.domainelementid = #{domainElementId}
    ), 
    booleanprops as ( select c.friendlyname fieldname
                              , c.tablename    
                              , (select decode(booleanvalue, 'Y', 'Yes', 'No') from booleanpropertyversion where booleanpropertyid = bc.changedFromVersionId) as oldValue
                              , bc.*
                      from booleanChanges bc, class c 
                      where bc.realizedElementClassId = c.classid
    ),
    
    -- get the change data on the xml fields
    xmlChanges as (
                    select 
                          ev.classid                realizedElementClassId
                        , decode(dbms_lob.compare( xpv.xmltext, empty_clob()), 0, to_clob('no_value'), xpv.xmltext) realizedXmlValue           
                    	, decode(dbms_lob.compare( xpv.xmltext, empty_clob()), 0, '', to_char(xpv.xmlpropertyid))  realizedValue
                        , xpv.languagecode          realizedElementLanguage
                        , ev.elementid              realizedElementId
                        , ev.elementversionid       realizedElementVersionId
                        , ev.changedfromversionid   changedFromVersionId
                        , (decode(nvl(ev.changedfromversionid, 0), 0, to_clob('no_value'), 
                       		(select xpv2.xmltext from xmlpropertyversion xpv2 where xpv2.xmlpropertyid = ev.changedfromversionid))) changedFromXmlValue 
                    from structureelementversion sev, elementversion ev, structureversion sv, xmlpropertyversion xpv
                    where sv.change_request_id = #{changeRequestId}
                        and sv.contextstatus = 'CLOSED'
                        and sev.elementversionid = ev.elementversionid
                        and sv.structureid = sev.structureid
                        and xpv.xmlpropertyid = ev.elementversionid
                        and xpv.domainelementid = #{domainElementId}
    ),
    xmlprops as ( select c.friendlyname fieldname
                        , c.tablename
                        , decode(dbms_lob.compare( xc.changedFromXmlValue, to_clob('no_value')), 0, '', to_char(xc.changedFromVersionId)) oldValue
                        , xc.*                       
                  from xmlChanges xc, class c 
                  where xc.realizedElementClassId = c.classid
    ),
    
    -- Get the changes on table (Category table and rubric table)
    htmlChanges as (
                    select 
                          ev.classid                realizedElementClassId
                        , decode(dbms_lob.compare( hpv.htmltext, empty_clob()), 0, to_clob('no_value'), hpv.htmltext) realizedHtmlValue           
                        , decode(dbms_lob.compare( hpv.htmltext, empty_clob()), 0, 'no_value', to_char(hpv.htmlpropertyid))  realizedValue
                        , hpv.languagecode          realizedElementLanguage
                        , ev.elementid              realizedElementId
                        , ev.elementversionid       realizedElementVersionId
                        , ev.changedfromversionid   changedFromVersionId
                        , (decode(nvl(ev.changedfromversionid, 0), 0, to_clob('no_value'), 
                                 (select hpv2.htmltext from htmlpropertyversion hpv2 where hpv2.htmlpropertyid = ev.changedfromversionid))) changedFromHtmlValue
                    from structureelementversion sev, elementversion ev, structureversion sv, htmlpropertyversion hpv
                    where sv.change_request_id = #{changeRequestId}
                        and sv.contextstatus = 'CLOSED'
                        and sev.elementversionid = ev.elementversionid
                        and ev.classid not in (select classid from class c where className in('LongPresentation', 'ShortPresentation'))
                        and sv.structureid = sev.structureid
                        and hpv.htmlpropertyid = ev.elementversionid
                        and hpv.domainelementid = #{domainElementId}
    ),
    htmlprops as ( select c.friendlyname fieldname
                        , c.tablename
                        , decode(dbms_lob.compare( hc.changedFromHtmlValue, to_clob('no_value')), 0, '', to_char(hc.changedFromVersionId)) oldValue
                        , hc.*                       
                  from htmlChanges hc, class c 
                  where hc.realizedElementClassId = c.classid
    ),
    
       -- Get the changes on concept (i.e., concept status)
    conceptChanges as (
          select 
              cv.classid                realizedElementClassId
            , cv.status                 realizedValue
            , ' '                       realizedElementLanguage
            , cv.elementid              realizedElementId
            , cv.conceptid              realizedElementVersionId
            , ev.changedfromversionid   changedFromVersionId
          from structureelementversion sev, elementversion ev, structureversion sv, conceptversion cv
          where  sv.change_request_id = #{changeRequestId}
               and sv.contextstatus = 'CLOSED'
              and sev.elementversionid = ev.elementversionid
              and cv.conceptid = ev.elementversionid
              and ev.classid in ( select classid from class c where c.tablename = 'ConceptVersion' 
                                         and c.classname in ('ClassificationRoot', 'Section', 'Block', 'Group', 'Rubric', 'CCICODE', 'Chapter', 'Category'))
              and sv.structureid = sev.structureid
              and cv.elementid = #{domainElementId}
  )
  , conceptStatus as (  select
                              'status'  fieldname
                            , 'ConceptVersion' tablename
                            ,(select status from conceptversion where conceptid = cc.changedFromVersionId) as oldstatus
                            , cc.*                           
                         from conceptChanges cc
  ),
   
       -- get the change data on the concept property fields (i.e., daggerAsterisk)
  conceptPropertyChanges as (
    select 
           ev.classid                realizedElementClassId
         , cpv.rangeelementid        realizedRangeId
         , (select tpv.text from TextPropertyVersion tpv,  structureelementversion sev 
              where tpv.classid in (select classid from class where classname = 'DomainValueCode') 
              and domainelementid = cpv.rangeelementid
              and sev.elementversionid = tpv.textpropertyid
              and sev.structureid = sv.basestructureid
              ) realizedValue
         , ' '                       realizedElementLanguage
         , ev.elementid              realizedElementId
         , ev.elementversionid       realizedElementVersionId
         , ev.changedfromversionid   changedFromVersionId
         , sv.basestructureid        basecontextid
     from structureelementversion sev, elementversion ev, structureversion sv, conceptpropertyversion cpv
    where sv.change_request_id = #{changeRequestId}
         and sv.contextstatus = 'CLOSED'
         and sev.elementversionid = ev.elementversionid
         and ev.classid not in (select classid from class c where className in('LongPresentation', 'ShortPresentation', 'Narrower'))
         and sv.structureid = sev.structureid
         and cpv.conceptpropertyid = ev.elementversionid
         and cpv.domainelementid = #{domainElementId}
  )
  ,conceptprops as 
  (
      select  c.friendlyname fieldname
              , c.tablename
               ,(select rangeelementid from conceptpropertyversion where conceptpropertyid = cpc.changedFromVersionId) as oldRangeId
               , cpc.*               
      from conceptPropertyChanges cpc, class c
      where cpc.realizedElementClassId = c.classid
  )
    
    -- Get all realized change data  
  select realizedElementVersionId, tablename, fieldname, oldvalue, realizedvalue
  from
  (
    select t.realizedElementVersionId, t.tablename, t.fieldname || ' ' || t.realizedElementLanguage as fieldname,  t.oldValue, t.realizedValue, decode(t.fieldname, 'Code', 1, 2) as rid 
    from textprops t
      
    union all
      
    select bp.realizedElementVersionId, bp.tablename, bp.fieldname || ' ' || bp.realizedElementLanguage as fieldname,  bp.oldValue, bp.realizedValue, 2 as rid
    from booleanprops bp
      
    union all      
            
    select xp.realizedElementVersionId, xp.tablename, xp.fieldname || ' ' || xp.realizedElementLanguage as fieldname,  xp.oldValue, 
           decode(dbms_lob.compare(xp.realizedXmlValue, xp.changedFromXmlValue), 0, xp.oldValue, xp.realizedValue) realizedValue, 2 as rid 
    from xmlprops xp 
        
    union all
    select hp.realizedElementVersionId, hp.tablename, hp.fieldname || ' ' || hp.realizedElementLanguage as fieldname,  hp.oldValue, 
    		decode(dbms_lob.compare(hp.realizedHtmlValue, hp.changedFromHtmlValue), 0, hp.oldValue, hp.realizedValue) realizedValue, 2 as rid 
    from htmlprops hp 
    
    union all
      
    select cs.realizedElementVersionId, cs.tablename, cs.fieldname || ' ' || cs.realizedElementLanguage as fieldname,  cs.oldstatus as oldValue, cs.realizedValue, 1 as rid 
    from conceptStatus cs
    
    union all
    select cp.realizedElementVersionId, cp.tablename, cp.fieldname || ' ' || cp.realizedElementLanguage as fieldname,  
         (select tpv.text from TextPropertyVersion tpv,  structureelementversion sev 
            where tpv.classid in (select classid from class where classname = 'DomainValueCode') 
            and domainelementid = oldRangeId
            and sev.elementversionid = tpv.textpropertyid
            and sev.structureid = basecontextid
         ) oldValue, 
         cp.realizedValue,
         2 as rid
    from conceptprops cp
    order by rid, fieldname, realizedElementVersionId    
  )
    
  </select>   
  
  
   <select id="findBaseElementVersionIdByRealizedContext" resultType="java.lang.Long" >
              select baseSev.elementversionid from STRUCTUREELEMENTVERSION baseSev
                 where baseSev.structureId = (select basestructureId from structureversion realizedBySV
                                     where realizedBySV.structureId = #{realizedByContextId} ) 
                 and elementId= (select elementId from STRUCTUREELEMENTVERSION sev 
                                    where sev.elementversionid= #{elementVersionId}
                                       and sev.structureId =#{currentContextId})
  </select>
 
    <select id="findValidationConceptAndPropertyIdsByValidationDefinitionElementVersionId" resultType="java.lang.Long" >
          select cv.conceptid evid from conceptversion cv, structureelementversion sev
               where cv.elementid = (select domainelementid from xmlpropertyversion xpv where xpv.xmlpropertyid = #{validationDefinitionElementVersionId})
                 and sev.structureid = #{currentContextId}
                 and sev.elementversionid = cv.conceptid
          UNION
          select cpv.conceptpropertyid evid from conceptpropertyversion cpv, structureelementversion sev
             where cpv.domainelementid = (select domainelementid from xmlpropertyversion xpv where xpv.xmlpropertyid = #{validationDefinitionElementVersionId})
              and sev.structureid = #{currentContextId}
              and sev.elementversionid = cpv.conceptpropertyid
  </select>
  
  
  
  
   <update id="updateElementVersionChangedFromVersionId" >
      update ELEMENTVERSION set
         CHANGEDFROMVERSIONID = #{changedFromVersionId}
      where ELEMENTVERSIONID = #{elementVersionId}
   </update>
  
  <delete id="deleteStructureElementVersion" parameterType="java.lang.Long">
       delete STRUCTUREELEMENTVERSION
       where ELEMENTVERSIONID = #{elementVersionId}
  </delete>
  
  
  
  
   
  
</mapper>
 